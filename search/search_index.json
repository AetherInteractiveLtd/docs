{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Aether's Developer Documentation Glossary Tina Creating a Project with Tina *","title":"Home"},{"location":"#welcome-to-aethers-developer-documentation","text":"","title":"Welcome to Aether's Developer Documentation"},{"location":"#glossary","text":"","title":"Glossary"},{"location":"#tina","text":"Creating a Project with Tina *","title":"Tina"},{"location":"intro/tina/core/","text":"Main Usage Game Tina requires certain initialization on the Server and the Client. index.server.ts import Tina from '@rbxts/tina'; import 'lib/game'; // Initialize Game. import 'lib/net'; // Initalize Networking. import 'lib/ecs'; // Initalize Entity Component System. import { User } from 'shared/lib/game/user'; /* Starts the Game Processes */ Tina.startGame(\"GuessTheNumber\"); Tina.setUserClass(User); // Sets the custom user class. index.client.ts import Tina from '@rbxts/tina'; import 'lib/game'; // Initialize Game. import 'lib/net'; // Initialize Networking. import 'lib/ecs'; // Initialize Entity Component System. import { User } from 'shared/lib/game/user'; // TODO: Decide what client-side initialization needs to look like. Events","title":"Main Features"},{"location":"intro/tina/core/#main-usage","text":"","title":"Main Usage"},{"location":"intro/tina/core/#game","text":"Tina requires certain initialization on the Server and the Client. index.server.ts import Tina from '@rbxts/tina'; import 'lib/game'; // Initialize Game. import 'lib/net'; // Initalize Networking. import 'lib/ecs'; // Initalize Entity Component System. import { User } from 'shared/lib/game/user'; /* Starts the Game Processes */ Tina.startGame(\"GuessTheNumber\"); Tina.setUserClass(User); // Sets the custom user class. index.client.ts import Tina from '@rbxts/tina'; import 'lib/game'; // Initialize Game. import 'lib/net'; // Initialize Networking. import 'lib/ecs'; // Initialize Entity Component System. import { User } from 'shared/lib/game/user'; // TODO: Decide what client-side initialization needs to look like.","title":"Game"},{"location":"intro/tina/core/#events","text":"","title":"Events"},{"location":"intro/tina/ecs/","text":"Using the ECS The ECS (Entity Component System) is a core feature of Tina.","title":"Entity Component System"},{"location":"intro/tina/ecs/#using-the-ecs","text":"The ECS (Entity Component System) is a core feature of Tina.","title":"Using the ECS"},{"location":"intro/tina/philosophy/","text":"Tina's Purpose Ideology Our ideology in creating Tina (\" T ina i s n ot A ero\") was to create an optimized server-side solution for the problems many of our game ideas would've been faced with had we kept Roblox's backend philosophy. Tina aims to replace many of the traditional frameworks like AeroGameFramework, Knit, and Flamework; all of these rely heavily on Services/Controllers. Instead, Tina relies on various patterns such as heavily Event/Process-Driven Systems, where everything happens either because we're at the correct point in a \"Process\" or because a certain \"Event\" has flared. The primary method of interacting with the game world is with a flavoured Entity Component System; the Server only runs processing on any \"Components\" using \"Systems\", whilst the Client uses those Components along with \"Effects\" to run pre-rendering tasks or display any relevant information to the end-user. Aether's Investment We at Aether have always wanted to build ideas beyond the typical technical scope of Roblox projects, here we found ourselves at an impasse where the engine simply wasn't powerful enough to support enough characters, a large enough scale, provide proper - compressed data-based networking. Thus, we're spending a while working on Tina to facilitate our in-house projects and any other dreams people might have.","title":"The Philosophy"},{"location":"intro/tina/philosophy/#tinas-purpose","text":"","title":"Tina's Purpose"},{"location":"intro/tina/philosophy/#ideology","text":"Our ideology in creating Tina (\" T ina i s n ot A ero\") was to create an optimized server-side solution for the problems many of our game ideas would've been faced with had we kept Roblox's backend philosophy. Tina aims to replace many of the traditional frameworks like AeroGameFramework, Knit, and Flamework; all of these rely heavily on Services/Controllers. Instead, Tina relies on various patterns such as heavily Event/Process-Driven Systems, where everything happens either because we're at the correct point in a \"Process\" or because a certain \"Event\" has flared. The primary method of interacting with the game world is with a flavoured Entity Component System; the Server only runs processing on any \"Components\" using \"Systems\", whilst the Client uses those Components along with \"Effects\" to run pre-rendering tasks or display any relevant information to the end-user.","title":"Ideology"},{"location":"intro/tina/philosophy/#aethers-investment","text":"We at Aether have always wanted to build ideas beyond the typical technical scope of Roblox projects, here we found ourselves at an impasse where the engine simply wasn't powerful enough to support enough characters, a large enough scale, provide proper - compressed data-based networking. Thus, we're spending a while working on Tina to facilitate our in-house projects and any other dreams people might have.","title":"Aether's Investment"},{"location":"intro/tina/start/","text":"Tina Game Template Commands rbxtsc -w - Start the TypeScript compiler. rojo start - Start the Rojo server. Project layout default.project.json # Rojo configuration package.json tsconfig.json # rbxts configuration tina.yml # Tina configuration /node_modules/ # ... /src/ /client/ index.client.ts # Initalize the Client-Side, mostly through Tina /lib/ /game/ index.ts # Start all core game loops/listeners. # ... Large logic/core loops /net/ index.ts # ... Any special network handlers /ecs/ /effects/ # ... Any Effects used for entities /systems/ # ... Any Systems that interact with components/effects /server/ index.server.ts /lib/ /game/ index.ts # Start all core game loops/listeners. # ... Large logic/core loops /net/ index.ts # ... Any special network handlers /ecs/ /systems/ # ... Any Systems that interact with components/effects /shared/ index.ts /lib/ /game/ /net/ index.ts # Exports the network definitions. packets.d.ts # Provides all packet types for the network. /ecs/ index.ts /components/ # ... All available components /effects/ # ... All available effects, without implementation.","title":"Getting Started"},{"location":"intro/tina/start/#tina-game-template","text":"","title":"Tina Game Template"},{"location":"intro/tina/start/#commands","text":"rbxtsc -w - Start the TypeScript compiler. rojo start - Start the Rojo server.","title":"Commands"},{"location":"intro/tina/start/#project-layout","text":"default.project.json # Rojo configuration package.json tsconfig.json # rbxts configuration tina.yml # Tina configuration /node_modules/ # ... /src/ /client/ index.client.ts # Initalize the Client-Side, mostly through Tina /lib/ /game/ index.ts # Start all core game loops/listeners. # ... Large logic/core loops /net/ index.ts # ... Any special network handlers /ecs/ /effects/ # ... Any Effects used for entities /systems/ # ... Any Systems that interact with components/effects /server/ index.server.ts /lib/ /game/ index.ts # Start all core game loops/listeners. # ... Large logic/core loops /net/ index.ts # ... Any special network handlers /ecs/ /systems/ # ... Any Systems that interact with components/effects /shared/ index.ts /lib/ /game/ /net/ index.ts # Exports the network definitions. packets.d.ts # Provides all packet types for the network. /ecs/ index.ts /components/ # ... All available components /effects/ # ... All available effects, without implementation.","title":"Project layout"}]}